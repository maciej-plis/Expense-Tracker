/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package matthias.expense_tracker.openapi.api

import matthias.expense_tracker.openapi.model.AddEditPurchaseRequest
import matthias.expense_tracker.openapi.model.BulkDeleteRequest
import matthias.expense_tracker.openapi.model.PurchaseDto
import matthias.expense_tracker.openapi.model.PurchaseItemsPage
import matthias.expense_tracker.openapi.model.PurchasesPage
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired


import kotlin.collections.List
import kotlin.collections.Map

@RequestMapping("\${api.base-path:}")
interface PurchasesApi {

    @Operation(
        summary = "Add new purchase",
        operationId = "addPurchase",
        description = "",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "(OK) Success response containing added purchase",
                content = [Content(schema = Schema(implementation = PurchaseDto::class))]
            ),
            ApiResponse(
                responseCode = "400",
                description = "(BAD_REQUEST) Failure response when request body is invalid",
                content = [Content(schema = Schema(implementation = kotlin.String::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/api/purchases"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun addPurchase(
        @Parameter(
            description = "Request containing new purchase to be added",
            required = true
        ) @RequestBody addEditPurchaseRequest: AddEditPurchaseRequest
    ): ResponseEntity<PurchaseDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Get purchase",
        operationId = "getPurchase",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "(OK) Success response containing purchase", content = [Content(schema = Schema(implementation = PurchaseDto::class))])
        ]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/api/purchases/{purchaseId}"],
        produces = ["application/json"]
    )
    fun getPurchase(@Parameter(description = "", required = true) @PathVariable("purchaseId") purchaseId: java.util.UUID): ResponseEntity<PurchaseDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Get purchase items",
        operationId = "getPurchaseItems",
        description = "",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "(OK) Success response containing page of purchase items",
                content = [Content(schema = Schema(implementation = PurchaseItemsPage::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/api/purchase-items"],
        produces = ["application/json"]
    )
    fun getPurchaseItems(
        @Parameter(description = "") @RequestParam(value = "page", required = false) page: kotlin.Int?,
        @Parameter(description = "") @RequestParam(value = "size", required = false) size: kotlin.Int?,
        @Parameter(description = "") @RequestParam(value = "sort", required = false) sort: kotlin.String?,
        @Parameter(description = "") @RequestParam(value = "sort", required = false) sort2: kotlin.String?
    ): ResponseEntity<PurchaseItemsPage> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Get purchases",
        operationId = "getPurchases",
        description = "",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "(OK) Success response containing page of purchases",
                content = [Content(schema = Schema(implementation = PurchasesPage::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/api/purchases"],
        produces = ["application/json"]
    )
    fun getPurchases(
        @Parameter(description = "") @RequestParam(value = "page", required = false) page: kotlin.Int?,
        @Parameter(description = "") @RequestParam(value = "size", required = false) size: kotlin.Int?,
        @Parameter(description = "") @RequestParam(value = "sort", required = false) sort: kotlin.String?
    ): ResponseEntity<PurchasesPage> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Remove purchase",
        operationId = "removePurchase",
        description = "",
        responses = [
            ApiResponse(responseCode = "204", description = "(NO_CONTENT) Success response")
        ]
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/api/purchases/{purchaseId}"]
    )
    fun removePurchase(@Parameter(description = "", required = true) @PathVariable("purchaseId") purchaseId: java.util.UUID): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Delete multiple purchases",
        operationId = "removePurchases",
        description = "",
        responses = [
            ApiResponse(responseCode = "204", description = "(NO_CONTENT) Success response")
        ]
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/api/purchases"],
        consumes = ["application/json"]
    )
    fun removePurchases(
        @Parameter(
            description = "Request containing ids of purchases to be deleted",
            required = true
        ) @RequestBody bulkDeleteRequest: BulkDeleteRequest
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Update purchase",
        operationId = "updatePurchase",
        description = "",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "(OK) Success response containing updated purchase",
                content = [Content(schema = Schema(implementation = PurchaseDto::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.PUT],
        value = ["/api/purchases/{purchaseId}"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun updatePurchase(
        @Parameter(description = "", required = true) @PathVariable("purchaseId") purchaseId: java.util.UUID,
        @Parameter(description = "Request containing new purchase to be added", required = true) @RequestBody addEditPurchaseRequest: AddEditPurchaseRequest
    ): ResponseEntity<PurchaseDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
