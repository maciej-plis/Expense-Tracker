plugins {
    id "org.springframework.boot" version "2.6.3"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "com.palantir.docker" version "0.31.0"
    id "java"
    id "groovy"
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += sourceSets.main.output + test.output
            runtimeClasspath += sourceSets.main.output + test.output
            srcDirs = ["$projectDir/src/integration-test/groovy"]
        }
        resources.srcDir "$projectDir/src/integration-test/resources"
    }
}

group = rootProject.group
version = rootProject.version
sourceCompatibility = "17"
targetCompatibility = "17"

repositories {
    mavenCentral()
}

dependencies {
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    annotationProcessor "org.projectlombok:lombok:1.18.22"
    compileOnly "org.projectlombok:lombok:1.18.22"

    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    compileOnly "org.mapstruct:mapstruct:1.4.2.Final"

    runtimeOnly project(":expense-tracker-frontend")
    implementation project(":expense-tracker-backend-api")

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    runtimeOnly "org.liquibase:liquibase-core:4.7.1"
    runtimeOnly "org.postgresql:postgresql:42.3.1"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.spockframework:spock-spring:2.0-groovy-3.0"
    testImplementation "org.mapstruct:mapstruct:1.4.2.Final"
    testImplementation "org.codehaus.groovy:groovy-json:3.0.9"

    integrationTestRuntimeOnly 'com.h2database:h2:2.1.210'
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test, group: 'verification') {
    useJUnitPlatform()
    mustRunAfter test

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check {
    dependsOn integrationTest
}

compileJava {
    options.compilerArgs += [
            "-Amapstruct.defaultComponentModel=spring",
            "-Amapstruct.unmappedTargetPolicy=ERROR"
    ]
}

bootJar.manifest {
    attributes(
            "Implementation-Title": "Expense Tracker",
            "Implementation-Version": project.version
    )
}

docker {
    String imgName = rootProject.name
    String imgVersion = rootProject.version

    dockerfile file("$rootDir/docker/Dockerfile")
    name "$imgName:$imgVersion"
    tag "latest", "$imgName:latest"
    buildArgs(JAR_FILE: bootJar.getArchiveFileName().get())
    files bootJar.getArchiveFile().get()
}